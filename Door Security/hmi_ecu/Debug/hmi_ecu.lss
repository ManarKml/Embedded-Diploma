
hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00003116  000031aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800134  00800134  0000327e  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c0  00000000  00000000  00006130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000076a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000092e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b371  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_4>
      14:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__vector_9>
      28:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__vector_10>
      2c:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 18 	jmp	0x306a	; 0x306a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 18 	jmp	0x306a	; 0x306a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 35 18 	jmp	0x306a	; 0x306a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 35 18 	jmp	0x306a	; 0x306a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 35 18 	jmp	0x306a	; 0x306a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
#include "hmi_func.h"
#include "timer.h"
#include <avr/io.h>

int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	6b 97       	sbiw	r28, 0x1b	; 27
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	/*------ UART and LCD Initialization ------*/
	UART_ConfigType UART_Configurations = {DATABITS_8, NONE, STOPBITS_1, 9600};
    11d6:	9e 01       	movw	r18, r28
    11d8:	2e 5f       	subi	r18, 0xFE	; 254
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	3b 8b       	std	Y+19, r19	; 0x13
    11de:	2a 8b       	std	Y+18, r18	; 0x12
    11e0:	8d e2       	ldi	r24, 0x2D	; 45
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	9d 8b       	std	Y+21, r25	; 0x15
    11e6:	8c 8b       	std	Y+20, r24	; 0x14
    11e8:	97 e0       	ldi	r25, 0x07	; 7
    11ea:	9e 8b       	std	Y+22, r25	; 0x16
    11ec:	ec 89       	ldd	r30, Y+20	; 0x14
    11ee:	fd 89       	ldd	r31, Y+21	; 0x15
    11f0:	00 80       	ld	r0, Z
    11f2:	2c 89       	ldd	r18, Y+20	; 0x14
    11f4:	3d 89       	ldd	r19, Y+21	; 0x15
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	3d 8b       	std	Y+21, r19	; 0x15
    11fc:	2c 8b       	std	Y+20, r18	; 0x14
    11fe:	ea 89       	ldd	r30, Y+18	; 0x12
    1200:	fb 89       	ldd	r31, Y+19	; 0x13
    1202:	00 82       	st	Z, r0
    1204:	2a 89       	ldd	r18, Y+18	; 0x12
    1206:	3b 89       	ldd	r19, Y+19	; 0x13
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	3b 8b       	std	Y+19, r19	; 0x13
    120e:	2a 8b       	std	Y+18, r18	; 0x12
    1210:	3e 89       	ldd	r19, Y+22	; 0x16
    1212:	31 50       	subi	r19, 0x01	; 1
    1214:	3e 8b       	std	Y+22, r19	; 0x16
    1216:	8e 89       	ldd	r24, Y+22	; 0x16
    1218:	88 23       	and	r24, r24
    121a:	41 f7       	brne	.-48     	; 0x11ec <main+0x2a>
	UART_init(&UART_Configurations);
    121c:	ce 01       	movw	r24, r28
    121e:	02 96       	adiw	r24, 0x02	; 2
    1220:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <UART_init>
	Timer_ConfigType Timer_Configurations = {0, 31249, TIMER_1, F_CPU_256, COMPARE};
    1224:	fe 01       	movw	r30, r28
    1226:	39 96       	adiw	r30, 0x09	; 9
    1228:	f8 8f       	std	Y+24, r31	; 0x18
    122a:	ef 8b       	std	Y+23, r30	; 0x17
    122c:	26 e2       	ldi	r18, 0x26	; 38
    122e:	31 e0       	ldi	r19, 0x01	; 1
    1230:	3a 8f       	std	Y+26, r19	; 0x1a
    1232:	29 8f       	std	Y+25, r18	; 0x19
    1234:	37 e0       	ldi	r19, 0x07	; 7
    1236:	3b 8f       	std	Y+27, r19	; 0x1b
    1238:	e9 8d       	ldd	r30, Y+25	; 0x19
    123a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    123c:	00 80       	ld	r0, Z
    123e:	29 8d       	ldd	r18, Y+25	; 0x19
    1240:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	3a 8f       	std	Y+26, r19	; 0x1a
    1248:	29 8f       	std	Y+25, r18	; 0x19
    124a:	ef 89       	ldd	r30, Y+23	; 0x17
    124c:	f8 8d       	ldd	r31, Y+24	; 0x18
    124e:	00 82       	st	Z, r0
    1250:	2f 89       	ldd	r18, Y+23	; 0x17
    1252:	38 8d       	ldd	r19, Y+24	; 0x18
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	38 8f       	std	Y+24, r19	; 0x18
    125a:	2f 8b       	std	Y+23, r18	; 0x17
    125c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    125e:	31 50       	subi	r19, 0x01	; 1
    1260:	3b 8f       	std	Y+27, r19	; 0x1b
    1262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1264:	88 23       	and	r24, r24
    1266:	41 f7       	brne	.-48     	; 0x1238 <main+0x76>
	Timer_init(&Timer_Configurations);
    1268:	ce 01       	movw	r24, r28
    126a:	09 96       	adiw	r24, 0x09	; 9
    126c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <Timer_init>
	Timer_setCallBack(HMI_timerCallback, TIMER_1);
    1270:	8e e9       	ldi	r24, 0x9E	; 158
    1272:	9d e0       	ldi	r25, 0x0D	; 13
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <Timer_setCallBack>

	LCD_init();
    127a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <LCD_init>

	SREG |= (1<<7); /* Enable global interrupts */
    127e:	af e5       	ldi	r26, 0x5F	; 95
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ef e5       	ldi	r30, 0x5F	; 95
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	8c 93       	st	X, r24

	uint8 flag = 0;
    128c:	19 82       	std	Y+1, r1	; 0x01


	while(UART_recieveByte() != READY_COMM); /* Wait for Control ECU readiness */
    128e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	e1 f7       	brne	.-8      	; 0x128e <main+0xcc>

	flag = HMI_putPassword();
    1296:	0e 94 2b 0a 	call	0x1456	; 0x1456 <HMI_putPassword>
    129a:	89 83       	std	Y+1, r24	; 0x01

	/*------ Main Interface ------*/
	while(1)
	{
		LCD_clearScreen();
    129c:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("+ : open door");
    12a0:	80 e6       	ldi	r24, 0x60	; 96
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
		LCD_moveCursor(1, 0);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
		LCD_displayString("- : change pass");
    12b0:	8e e6       	ldi	r24, 0x6E	; 110
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

		flag = KEYPAD_getPressedKey();
    12b8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <KEYPAD_getPressedKey>
    12bc:	89 83       	std	Y+1, r24	; 0x01

		switch (flag)
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	e8 2f       	mov	r30, r24
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	f9 8b       	std	Y+17, r31	; 0x11
    12c6:	e8 8b       	std	Y+16, r30	; 0x10
    12c8:	28 89       	ldd	r18, Y+16	; 0x10
    12ca:	39 89       	ldd	r19, Y+17	; 0x11
    12cc:	2b 32       	cpi	r18, 0x2B	; 43
    12ce:	31 05       	cpc	r19, r1
    12d0:	31 f0       	breq	.+12     	; 0x12de <main+0x11c>
    12d2:	88 89       	ldd	r24, Y+16	; 0x10
    12d4:	99 89       	ldd	r25, Y+17	; 0x11
    12d6:	8d 32       	cpi	r24, 0x2D	; 45
    12d8:	91 05       	cpc	r25, r1
    12da:	29 f0       	breq	.+10     	; 0x12e6 <main+0x124>
    12dc:	df cf       	rjmp	.-66     	; 0x129c <main+0xda>
		{
		case '+':
			flag = HMI_checkPassword();
    12de:	0e 94 cf 0b 	call	0x179e	; 0x179e <HMI_checkPassword>
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	db cf       	rjmp	.-74     	; 0x129c <main+0xda>
			break;
		case '-':
			flag = HMI_changePassword();
    12e6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <HMI_changePassword>
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	d7 cf       	rjmp	.-82     	; 0x129c <main+0xda>

000012ee <HMI_enterPassword>:
/*
 * Description :
 * Get password input from keypad
 */
void HMI_enterPassword(uint8* password, uint8 row, uint8 col)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	64 97       	sbiw	r28, 0x14	; 20
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	9a 8b       	std	Y+18, r25	; 0x12
    1304:	89 8b       	std	Y+17, r24	; 0x11
    1306:	6b 8b       	std	Y+19, r22	; 0x13
    1308:	4c 8b       	std	Y+20, r20	; 0x14
	LCD_moveCursor(row, col);
    130a:	8b 89       	ldd	r24, Y+19	; 0x13
    130c:	6c 89       	ldd	r22, Y+20	; 0x14
    130e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>

    for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1312:	18 8a       	std	Y+16, r1	; 0x10
    1314:	8a c0       	rjmp	.+276    	; 0x142a <HMI_enterPassword+0x13c>
    {
        uint8 key = KEYPAD_getPressedKey();
    1316:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <KEYPAD_getPressedKey>
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a8 e4       	ldi	r26, 0x48	; 72
    1322:	b3 e4       	ldi	r27, 0x43	; 67
    1324:	8b 87       	std	Y+11, r24	; 0x0b
    1326:	9c 87       	std	Y+12, r25	; 0x0c
    1328:	ad 87       	std	Y+13, r26	; 0x0d
    132a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a ef       	ldi	r20, 0xFA	; 250
    133a:	54 e4       	ldi	r21, 0x44	; 68
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	8f 83       	std	Y+7, r24	; 0x07
    1346:	98 87       	std	Y+8, r25	; 0x08
    1348:	a9 87       	std	Y+9, r26	; 0x09
    134a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	2c f4       	brge	.+10     	; 0x136e <HMI_enterPassword+0x80>
		__ticks = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <HMI_enterPassword+0xfe>
	else if (__tmp > 65535)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1382:	18 16       	cp	r1, r24
    1384:	4c f5       	brge	.+82     	; 0x13d8 <HMI_enterPassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <HMI_enterPassword+0xe0>
    13b0:	88 ec       	ldi	r24, 0xC8	; 200
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <HMI_enterPassword+0xce>
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f7       	brne	.-38     	; 0x13b0 <HMI_enterPassword+0xc2>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <HMI_enterPassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <HMI_enterPassword+0x10a>
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200); /* Debounce delay */
        if(key >= 0 && key <= 9)
    1400:	8f 85       	ldd	r24, Y+15	; 0x0f
    1402:	8a 30       	cpi	r24, 0x0A	; 10
    1404:	78 f4       	brcc	.+30     	; 0x1424 <HMI_enterPassword+0x136>
        {
            password[i] = key + '0'; /* Store key as ASCII digit */
    1406:	88 89       	ldd	r24, Y+16	; 0x10
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	9a 89       	ldd	r25, Y+18	; 0x12
    1410:	fc 01       	movw	r30, r24
    1412:	e2 0f       	add	r30, r18
    1414:	f3 1f       	adc	r31, r19
    1416:	8f 85       	ldd	r24, Y+15	; 0x0f
    1418:	80 5d       	subi	r24, 0xD0	; 208
    141a:	80 83       	st	Z, r24
            LCD_displayString("*"); /* Mask password display */
    141c:	8e e7       	ldi	r24, 0x7E	; 126
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
 */
void HMI_enterPassword(uint8* password, uint8 row, uint8 col)
{
	LCD_moveCursor(row, col);

    for(uint8 i = 0; i < PASSWORD_LENGTH; i++)
    1424:	88 89       	ldd	r24, Y+16	; 0x10
    1426:	8f 5f       	subi	r24, 0xFF	; 255
    1428:	88 8b       	std	Y+16, r24	; 0x10
    142a:	88 89       	ldd	r24, Y+16	; 0x10
    142c:	85 30       	cpi	r24, 0x05	; 5
    142e:	08 f4       	brcc	.+2      	; 0x1432 <HMI_enterPassword+0x144>
    1430:	72 cf       	rjmp	.-284    	; 0x1316 <HMI_enterPassword+0x28>
        {
            password[i] = key + '0'; /* Store key as ASCII digit */
            LCD_displayString("*"); /* Mask password display */
        }
    }
    password[5] = '\0'; /* Null-terminate the string */
    1432:	89 89       	ldd	r24, Y+17	; 0x11
    1434:	9a 89       	ldd	r25, Y+18	; 0x12
    1436:	fc 01       	movw	r30, r24
    1438:	35 96       	adiw	r30, 0x05	; 5
    143a:	10 82       	st	Z, r1
    while(KEYPAD_getPressedKey() != '='); /* Wait for Enter key */
    143c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <KEYPAD_getPressedKey>
    1440:	8d 33       	cpi	r24, 0x3D	; 61
    1442:	e1 f7       	brne	.-8      	; 0x143c <HMI_enterPassword+0x14e>
}
    1444:	64 96       	adiw	r28, 0x14	; 20
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <HMI_putPassword>:
/*
 * Description :
 * Sets initial password
 */
uint8 HMI_putPassword(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	e1 97       	sbiw	r28, 0x31	; 49
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
	uint8 flag, password[PASSWORD_LENGTH + 1] = {0};
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	fe 01       	movw	r30, r28
    146e:	bc 96       	adiw	r30, 0x2c	; 44
    1470:	df 01       	movw	r26, r30
    1472:	98 2f       	mov	r25, r24
    1474:	1d 92       	st	X+, r1
    1476:	9a 95       	dec	r25
    1478:	e9 f7       	brne	.-6      	; 0x1474 <HMI_putPassword+0x1e>

	do{
		UART_sendByte(PUT_PASS); /* Send password put request */
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	0e 94 56 17 	call	0x2eac	; 0x2eac <UART_sendByte>

		LCD_clearScreen();
    1480:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    1484:	80 e8       	ldi	r24, 0x80	; 128
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

		HMI_enterPassword(password, 1, 0);
    148c:	ce 01       	movw	r24, r28
    148e:	8c 96       	adiw	r24, 0x2c	; 44
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 77 09 	call	0x12ee	; 0x12ee <HMI_enterPassword>
		UART_sendString(password); /* Send entered password to Control ECU */
    1498:	ce 01       	movw	r24, r28
    149a:	8c 96       	adiw	r24, 0x2c	; 44
    149c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <UART_sendString>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a8 e4       	ldi	r26, 0x48	; 72
    14a6:	b2 e4       	ldi	r27, 0x42	; 66
    14a8:	8f a3       	std	Y+39, r24	; 0x27
    14aa:	98 a7       	std	Y+40, r25	; 0x28
    14ac:	a9 a7       	std	Y+41, r26	; 0x29
    14ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b0:	6f a1       	ldd	r22, Y+39	; 0x27
    14b2:	78 a5       	ldd	r23, Y+40	; 0x28
    14b4:	89 a5       	ldd	r24, Y+41	; 0x29
    14b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a ef       	ldi	r20, 0xFA	; 250
    14be:	54 e4       	ldi	r21, 0x44	; 68
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8b a3       	std	Y+35, r24	; 0x23
    14ca:	9c a3       	std	Y+36, r25	; 0x24
    14cc:	ad a3       	std	Y+37, r26	; 0x25
    14ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d0:	6b a1       	ldd	r22, Y+35	; 0x23
    14d2:	7c a1       	ldd	r23, Y+36	; 0x24
    14d4:	8d a1       	ldd	r24, Y+37	; 0x25
    14d6:	9e a1       	ldd	r25, Y+38	; 0x26
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <HMI_putPassword+0x9c>
		__ticks = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9a a3       	std	Y+34, r25	; 0x22
    14ee:	89 a3       	std	Y+33, r24	; 0x21
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <HMI_putPassword+0x11a>
	else if (__tmp > 65535)
    14f2:	6b a1       	ldd	r22, Y+35	; 0x23
    14f4:	7c a1       	ldd	r23, Y+36	; 0x24
    14f6:	8d a1       	ldd	r24, Y+37	; 0x25
    14f8:	9e a1       	ldd	r25, Y+38	; 0x26
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	4c f5       	brge	.+82     	; 0x155c <HMI_putPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150a:	6f a1       	ldd	r22, Y+39	; 0x27
    150c:	78 a5       	ldd	r23, Y+40	; 0x28
    150e:	89 a5       	ldd	r24, Y+41	; 0x29
    1510:	9a a5       	ldd	r25, Y+42	; 0x2a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9a a3       	std	Y+34, r25	; 0x22
    1530:	89 a3       	std	Y+33, r24	; 0x21
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <HMI_putPassword+0xfc>
    1534:	88 ec       	ldi	r24, 0xC8	; 200
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	98 a3       	std	Y+32, r25	; 0x20
    153a:	8f 8f       	std	Y+31, r24	; 0x1f
    153c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    153e:	98 a1       	ldd	r25, Y+32	; 0x20
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <HMI_putPassword+0xea>
    1544:	98 a3       	std	Y+32, r25	; 0x20
    1546:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	89 a1       	ldd	r24, Y+33	; 0x21
    154a:	9a a1       	ldd	r25, Y+34	; 0x22
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	9a a1       	ldd	r25, Y+34	; 0x22
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	69 f7       	brne	.-38     	; 0x1534 <HMI_putPassword+0xde>
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <HMI_putPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155c:	6b a1       	ldd	r22, Y+35	; 0x23
    155e:	7c a1       	ldd	r23, Y+36	; 0x24
    1560:	8d a1       	ldd	r24, Y+37	; 0x25
    1562:	9e a1       	ldd	r25, Y+38	; 0x26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	9e 8f       	std	Y+30, r25	; 0x1e
    1576:	8d 8f       	std	Y+29, r24	; 0x1d
    1578:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <HMI_putPassword+0x126>
    1580:	9e 8f       	std	Y+30, r25	; 0x1e
    1582:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);

		LCD_clearScreen();
    1584:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("plz re-enter the");
    1588:	80 e9       	ldi	r24, 0x90	; 144
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
		LCD_moveCursor(1, 0);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
		LCD_displayString("same pass:");
    1598:	81 ea       	ldi	r24, 0xA1	; 161
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

		HMI_enterPassword(password, 1, 10);
    15a0:	ce 01       	movw	r24, r28
    15a2:	8c 96       	adiw	r24, 0x2c	; 44
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	4a e0       	ldi	r20, 0x0A	; 10
    15a8:	0e 94 77 09 	call	0x12ee	; 0x12ee <HMI_enterPassword>
		UART_sendString(password); /* Send second password to Control ECU */
    15ac:	ce 01       	movw	r24, r28
    15ae:	8c 96       	adiw	r24, 0x2c	; 44
    15b0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <UART_sendString>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a8 e4       	ldi	r26, 0x48	; 72
    15ba:	b2 e4       	ldi	r27, 0x42	; 66
    15bc:	89 8f       	std	Y+25, r24	; 0x19
    15be:	9a 8f       	std	Y+26, r25	; 0x1a
    15c0:	ab 8f       	std	Y+27, r26	; 0x1b
    15c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	69 8d       	ldd	r22, Y+25	; 0x19
    15c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8d 8b       	std	Y+21, r24	; 0x15
    15de:	9e 8b       	std	Y+22, r25	; 0x16
    15e0:	af 8b       	std	Y+23, r26	; 0x17
    15e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <HMI_putPassword+0x1b0>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <HMI_putPassword+0x22e>
	else if (__tmp > 65535)
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <HMI_putPassword+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	69 8d       	ldd	r22, Y+25	; 0x19
    1620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <HMI_putPassword+0x210>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	89 8b       	std	Y+17, r24	; 0x11
    1650:	89 89       	ldd	r24, Y+17	; 0x11
    1652:	9a 89       	ldd	r25, Y+18	; 0x12
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <HMI_putPassword+0x1fe>
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <HMI_putPassword+0x1f2>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <HMI_putPassword+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6d 89       	ldd	r22, Y+21	; 0x15
    1672:	7e 89       	ldd	r23, Y+22	; 0x16
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	98 8b       	std	Y+16, r25	; 0x10
    168a:	8f 87       	std	Y+15, r24	; 0x0f
    168c:	8f 85       	ldd	r24, Y+15	; 0x0f
    168e:	98 89       	ldd	r25, Y+16	; 0x10
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <HMI_putPassword+0x23a>
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		flag = UART_recieveByte(); /* Receive confirmation or error */
    1698:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    169c:	8b a7       	std	Y+43, r24	; 0x2b
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a8 e4       	ldi	r26, 0x48	; 72
    16a4:	b2 e4       	ldi	r27, 0x42	; 66
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <HMI_putPassword+0x29a>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <HMI_putPassword+0x318>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <HMI_putPassword+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <HMI_putPassword+0x2fa>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <HMI_putPassword+0x2e8>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <HMI_putPassword+0x2dc>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <HMI_putPassword+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <HMI_putPassword+0x324>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

	}while(flag == ERROR_PASS); /* Retry if passwords do not match */
    1782:	8b a5       	ldd	r24, Y+43	; 0x2b
    1784:	85 30       	cpi	r24, 0x05	; 5
    1786:	09 f4       	brne	.+2      	; 0x178a <HMI_putPassword+0x334>
    1788:	78 ce       	rjmp	.-784    	; 0x147a <HMI_putPassword+0x24>

	return flag;
    178a:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    178c:	e1 96       	adiw	r28, 0x31	; 49
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <HMI_checkPassword>:
/*
 * Description :
 * Checks password with Control ECU
 */
uint8 HMI_checkPassword(void)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	28 97       	sbiw	r28, 0x08	; 8
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
	uint8 flag, password[PASSWORD_LENGTH + 1] = {0};
    17b2:	86 e0       	ldi	r24, 0x06	; 6
    17b4:	fe 01       	movw	r30, r28
    17b6:	33 96       	adiw	r30, 0x03	; 3
    17b8:	df 01       	movw	r26, r30
    17ba:	98 2f       	mov	r25, r24
    17bc:	1d 92       	st	X+, r1
    17be:	9a 95       	dec	r25
    17c0:	e9 f7       	brne	.-6      	; 0x17bc <HMI_checkPassword+0x1e>

	uint8 i = 0;
    17c2:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < PASSWORD_ATTEMPTS; i++) /* Allow up to 3 attempts */
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	56 c0       	rjmp	.+172    	; 0x1874 <HMI_checkPassword+0xd6>
	{
		UART_sendByte(CHECK_PASS); /* Send password check request */
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	0e 94 56 17 	call	0x2eac	; 0x2eac <UART_sendByte>

		LCD_clearScreen();
    17ce:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    17d2:	80 e8       	ldi	r24, 0x80	; 128
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
		HMI_enterPassword(password, 1, 0);
    17da:	ce 01       	movw	r24, r28
    17dc:	03 96       	adiw	r24, 0x03	; 3
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 77 09 	call	0x12ee	; 0x12ee <HMI_enterPassword>

		UART_sendString(password); /* Send entered password to Control ECU */
    17e6:	ce 01       	movw	r24, r28
    17e8:	03 96       	adiw	r24, 0x03	; 3
    17ea:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <UART_sendString>

		flag = UART_recieveByte(); /* Receive confirmation or error */
    17ee:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    17f2:	8a 83       	std	Y+2, r24	; 0x02

		if(flag == CONFIRM_PASS)
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	84 30       	cpi	r24, 0x04	; 4
    17f8:	d1 f5       	brne	.+116    	; 0x186e <HMI_checkPassword+0xd0>
		{
			LCD_clearScreen();
    17fa:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
			LCD_displayString("Door unlocking");
    17fe:	8c ea       	ldi	r24, 0xAC	; 172
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
			LCD_moveCursor(1, 3);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	63 e0       	ldi	r22, 0x03	; 3
    180a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
			LCD_displayString("Please wait");
    180e:	8b eb       	ldi	r24, 0xBB	; 187
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

			/* Wait 15 seconds for door to close */
			g_seconds = 0;
    1816:	10 92 34 01 	sts	0x0134, r1
			while(g_seconds < DOOR_OPEN_TIME);
    181a:	80 91 34 01 	lds	r24, 0x0134
    181e:	8f 30       	cpi	r24, 0x0F	; 15
    1820:	e0 f3       	brcs	.-8      	; 0x181a <HMI_checkPassword+0x7c>

			LCD_clearScreen();
    1822:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
			LCD_displayString("Wait for people");
    1826:	87 ec       	ldi	r24, 0xC7	; 199
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
			LCD_moveCursor(1, 4);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
			LCD_displayString("to enter");
    1836:	87 ed       	ldi	r24, 0xD7	; 215
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

			flag = UART_recieveByte(); /* Wait for confirmation to close door */
    183e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    1842:	8a 83       	std	Y+2, r24	; 0x02

			LCD_clearScreen();
    1844:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
			LCD_displayString("Door locking");
    1848:	80 ee       	ldi	r24, 0xE0	; 224
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
			LCD_moveCursor(1, 3);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	63 e0       	ldi	r22, 0x03	; 3
    1854:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
			LCD_displayString("Please wait");
    1858:	8b eb       	ldi	r24, 0xBB	; 187
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

			/* Wait 15 seconds for door to close */
			g_seconds = 0;
    1860:	10 92 34 01 	sts	0x0134, r1
			while(g_seconds < DOOR_CLOSE_TIME);
    1864:	80 91 34 01 	lds	r24, 0x0134
    1868:	8f 30       	cpi	r24, 0x0F	; 15
    186a:	e0 f3       	brcs	.-8      	; 0x1864 <HMI_checkPassword+0xc6>
    186c:	07 c0       	rjmp	.+14     	; 0x187c <HMI_checkPassword+0xde>
uint8 HMI_checkPassword(void)
{
	uint8 flag, password[PASSWORD_LENGTH + 1] = {0};

	uint8 i = 0;
	for(i = 0; i < PASSWORD_ATTEMPTS; i++) /* Allow up to 3 attempts */
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	08 f4       	brcc	.+2      	; 0x187c <HMI_checkPassword+0xde>
    187a:	a6 cf       	rjmp	.-180    	; 0x17c8 <HMI_checkPassword+0x2a>
			break;
		}
	}

	/*------ Lock system if 3 incorrect attempts ------*/
	HMI_errorCheck(i);
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <HMI_errorCheck>

	return flag;
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1884:	28 96       	adiw	r28, 0x08	; 8
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <HMI_changePassword>:
/*
 * Description :
 * Requests password change
 */
uint8 HMI_changePassword(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	a4 97       	sbiw	r28, 0x24	; 36
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
	uint8 flag, password[PASSWORD_LENGTH + 1] = {0};
    18aa:	86 e0       	ldi	r24, 0x06	; 6
    18ac:	fe 01       	movw	r30, r28
    18ae:	7f 96       	adiw	r30, 0x1f	; 31
    18b0:	df 01       	movw	r26, r30
    18b2:	98 2f       	mov	r25, r24
    18b4:	1d 92       	st	X+, r1
    18b6:	9a 95       	dec	r25
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <HMI_changePassword+0x1e>

	uint8 i = 0;
    18ba:	1d 8e       	std	Y+29, r1	; 0x1d
	for(i = 0; i < PASSWORD_ATTEMPTS; i++) /* Allow up to 3 attempts */
    18bc:	1d 8e       	std	Y+29, r1	; 0x1d
    18be:	0c c1       	rjmp	.+536    	; 0x1ad8 <HMI_changePassword+0x242>
	{
		UART_sendByte(CHANGE_PASS); /* Send password change request */
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	0e 94 56 17 	call	0x2eac	; 0x2eac <UART_sendByte>

		LCD_clearScreen();
    18c6:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("plz enter old");
    18ca:	8d ee       	ldi	r24, 0xED	; 237
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
		LCD_moveCursor(1, 0);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
		LCD_displayString("pass:");
    18da:	8b ef       	ldi	r24, 0xFB	; 251
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

		HMI_enterPassword(password, 1, 5);
    18e2:	ce 01       	movw	r24, r28
    18e4:	4f 96       	adiw	r24, 0x1f	; 31
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	45 e0       	ldi	r20, 0x05	; 5
    18ea:	0e 94 77 09 	call	0x12ee	; 0x12ee <HMI_enterPassword>
		UART_sendString(password); /* Send entered password to Control ECU */
    18ee:	ce 01       	movw	r24, r28
    18f0:	4f 96       	adiw	r24, 0x1f	; 31
    18f2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <UART_sendString>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a8 e4       	ldi	r26, 0x48	; 72
    18fc:	b2 e4       	ldi	r27, 0x42	; 66
    18fe:	89 8f       	std	Y+25, r24	; 0x19
    1900:	9a 8f       	std	Y+26, r25	; 0x1a
    1902:	ab 8f       	std	Y+27, r26	; 0x1b
    1904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	69 8d       	ldd	r22, Y+25	; 0x19
    1908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8d 8b       	std	Y+21, r24	; 0x15
    1920:	9e 8b       	std	Y+22, r25	; 0x16
    1922:	af 8b       	std	Y+23, r26	; 0x17
    1924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1926:	6d 89       	ldd	r22, Y+21	; 0x15
    1928:	7e 89       	ldd	r23, Y+22	; 0x16
    192a:	8f 89       	ldd	r24, Y+23	; 0x17
    192c:	98 8d       	ldd	r25, Y+24	; 0x18
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <HMI_changePassword+0xb2>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <HMI_changePassword+0x130>
	else if (__tmp > 65535)
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <HMI_changePassword+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <HMI_changePassword+0x112>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9a 8b       	std	Y+18, r25	; 0x12
    1990:	89 8b       	std	Y+17, r24	; 0x11
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	9a 89       	ldd	r25, Y+18	; 0x12
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <HMI_changePassword+0x100>
    199a:	9a 8b       	std	Y+18, r25	; 0x12
    199c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <HMI_changePassword+0xf4>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <HMI_changePassword+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	8b 89       	ldd	r24, Y+19	; 0x13
    19c8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d0:	98 89       	ldd	r25, Y+16	; 0x10
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <HMI_changePassword+0x13c>
    19d6:	98 8b       	std	Y+16, r25	; 0x10
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		flag = UART_recieveByte();
    19da:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    19de:	8e 8f       	std	Y+30, r24	; 0x1e
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	a8 e4       	ldi	r26, 0x48	; 72
    19e6:	b2 e4       	ldi	r27, 0x42	; 66
    19e8:	8b 87       	std	Y+11, r24	; 0x0b
    19ea:	9c 87       	std	Y+12, r25	; 0x0c
    19ec:	ad 87       	std	Y+13, r26	; 0x0d
    19ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a ef       	ldi	r20, 0xFA	; 250
    19fe:	54 e4       	ldi	r21, 0x44	; 68
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8f 83       	std	Y+7, r24	; 0x07
    1a0a:	98 87       	std	Y+8, r25	; 0x08
    1a0c:	a9 87       	std	Y+9, r26	; 0x09
    1a0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	5f e3       	ldi	r21, 0x3F	; 63
    1a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a24:	88 23       	and	r24, r24
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <HMI_changePassword+0x19c>
		__ticks = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <HMI_changePassword+0x21a>
	else if (__tmp > 65535)
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	57 e4       	ldi	r21, 0x47	; 71
    1a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	4c f5       	brge	.+82     	; 0x1a9c <HMI_changePassword+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	51 e4       	ldi	r21, 0x41	; 65
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <HMI_changePassword+0x1fc>
    1a74:	88 ec       	ldi	r24, 0xC8	; 200
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	8b 83       	std	Y+3, r24	; 0x03
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <HMI_changePassword+0x1ea>
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <HMI_changePassword+0x1de>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <HMI_changePassword+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <HMI_changePassword+0x226>
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

		if(flag == CONFIRM_PASS) /* Allow password change if entered password is matched */
    1ac4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <HMI_changePassword+0x23c>
		{
			flag = HMI_putPassword();
    1aca:	0e 94 2b 0a 	call	0x1456	; 0x1456 <HMI_putPassword>
    1ace:	8e 8f       	std	Y+30, r24	; 0x1e
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <HMI_changePassword+0x24a>
uint8 HMI_changePassword(void)
{
	uint8 flag, password[PASSWORD_LENGTH + 1] = {0};

	uint8 i = 0;
	for(i = 0; i < PASSWORD_ATTEMPTS; i++) /* Allow up to 3 attempts */
    1ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <HMI_changePassword+0x24a>
    1ade:	f0 ce       	rjmp	.-544    	; 0x18c0 <HMI_changePassword+0x2a>
			break;
		}
	}

	/*------ Lock system if 3 incorrect attempts ------*/
	HMI_errorCheck(i);
    1ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <HMI_errorCheck>

	return flag;
    1ae6:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    1ae8:	a4 96       	adiw	r28, 0x24	; 36
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <HMI_errorCheck>:
/*
 * Description :
 * Lock system if 3 incorrect attempts
 */
void HMI_errorCheck(uint8 count)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
	if(count == PASSWORD_ATTEMPTS)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	a1 f4       	brne	.+40     	; 0x1b34 <HMI_errorCheck+0x3a>
	{
		LCD_clearScreen();
    1b0c:	0e 94 56 14 	call	0x28ac	; 0x28ac <LCD_clearScreen>
		LCD_displayString("System locked");
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
		LCD_moveCursor(1, 0);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
		LCD_displayString("wait for 1 min");
    1b20:	8f e0       	ldi	r24, 0x0F	; 15
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>

		/* Wait for 60 seconds to reset attempts */
		g_seconds = 0;
    1b28:	10 92 34 01 	sts	0x0134, r1
		while(g_seconds < LOCK_TIME_SECONDS);
    1b2c:	80 91 34 01 	lds	r24, 0x0134
    1b30:	8c 33       	cpi	r24, 0x3C	; 60
    1b32:	e0 f3       	brcs	.-8      	; 0x1b2c <HMI_errorCheck+0x32>
	}
}
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <HMI_timerCallback>:
/*
 * Description :
 * Timer callback to increment seconds
 */
void HMI_timerCallback(void)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    1b44:	80 91 34 01 	lds	r24, 0x0134
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	80 93 34 01 	sts	0x0134, r24
}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	60 97       	sbiw	r28, 0x10	; 16
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	65 e0       	ldi	r22, 0x05	; 5
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	66 e0       	ldi	r22, 0x06	; 6
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	67 e0       	ldi	r22, 0x07	; 7
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bb8:	1f 86       	std	Y+15, r1	; 0x0f
    1bba:	ab c0       	rjmp	.+342    	; 0x1d12 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bd0:	18 8a       	std	Y+16, r1	; 0x10
    1bd2:	22 c0       	rjmp	.+68     	; 0x1c18 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1bd4:	88 89       	ldd	r24, Y+16	; 0x10
    1bd6:	98 2f       	mov	r25, r24
    1bd8:	9c 5f       	subi	r25, 0xFC	; 252
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	69 2f       	mov	r22, r25
    1bde:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1be2:	88 23       	and	r24, r24
    1be4:	b1 f4       	brne	.+44     	; 0x1c12 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	88 89       	ldd	r24, Y+16	; 0x10
    1bf8:	89 0f       	add	r24, r25
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1c00:	60 96       	adiw	r28, 0x10	; 16
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c12:	88 89       	ldd	r24, Y+16	; 0x10
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	88 8b       	std	Y+16, r24	; 0x10
    1c18:	88 89       	ldd	r24, Y+16	; 0x10
    1c1a:	84 30       	cpi	r24, 0x04	; 4
    1c1c:	d8 f2       	brcs	.-74     	; 0x1bd4 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c2e:	b0 e4       	ldi	r27, 0x40	; 64
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <KEYPAD_getPressedKey+0x186>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <KEYPAD_getPressedKey+0x174>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <KEYPAD_getPressedKey+0x168>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <KEYPAD_getPressedKey+0x1b0>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	08 f4       	brcc	.+2      	; 0x1d1a <KEYPAD_getPressedKey+0x1c6>
    1d18:	51 cf       	rjmp	.-350    	; 0x1bbc <KEYPAD_getPressedKey+0x68>
    1d1a:	4e cf       	rjmp	.-356    	; 0x1bb8 <KEYPAD_getPressedKey+0x64>

00001d1c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	3c 83       	std	Y+4, r19	; 0x04
    1d34:	2b 83       	std	Y+3, r18	; 0x03
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	88 30       	cpi	r24, 0x08	; 8
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d40:	70 c0       	rjmp	.+224    	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	3c 81       	ldd	r19, Y+4	; 0x04
    1d46:	29 30       	cpi	r18, 0x09	; 9
    1d48:	31 05       	cpc	r19, r1
    1d4a:	5c f5       	brge	.+86     	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d56:	59 c0       	rjmp	.+178    	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	25 30       	cpi	r18, 0x05	; 5
    1d5e:	31 05       	cpc	r19, r1
    1d60:	9c f4       	brge	.+38     	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	82 30       	cpi	r24, 0x02	; 2
    1d68:	91 05       	cpc	r25, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d6c:	48 c0       	rjmp	.+144    	; 0x1dfe <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	23 30       	cpi	r18, 0x03	; 3
    1d74:	31 05       	cpc	r19, r1
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d78:	45 c0       	rjmp	.+138    	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d84:	39 c0       	rjmp	.+114    	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d86:	67 c0       	rjmp	.+206    	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	26 30       	cpi	r18, 0x06	; 6
    1d8e:	31 05       	cpc	r19, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d92:	41 c0       	rjmp	.+130    	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	87 30       	cpi	r24, 0x07	; 7
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d9e:	3e c0       	rjmp	.+124    	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1da0:	37 c0       	rjmp	.+110    	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	2c 30       	cpi	r18, 0x0C	; 12
    1da8:	31 05       	cpc	r19, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0x92>
    1dac:	46 c0       	rjmp	.+140    	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	8d 30       	cpi	r24, 0x0D	; 13
    1db4:	91 05       	cpc	r25, r1
    1db6:	5c f4       	brge	.+22     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	2a 30       	cpi	r18, 0x0A	; 10
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	b1 f1       	breq	.+108    	; 0x1e2e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	8b 30       	cpi	r24, 0x0B	; 11
    1dc8:	91 05       	cpc	r25, r1
    1dca:	a4 f5       	brge	.+104    	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1dcc:	2d c0       	rjmp	.+90     	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	2e 30       	cpi	r18, 0x0E	; 14
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	b9 f1       	breq	.+110    	; 0x1e46 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	8e 30       	cpi	r24, 0x0E	; 14
    1dde:	91 05       	cpc	r25, r1
    1de0:	7c f1       	brlt	.+94     	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	2f 30       	cpi	r18, 0x0F	; 15
    1de8:	31 05       	cpc	r19, r1
    1dea:	79 f1       	breq	.+94     	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	80 31       	cpi	r24, 0x10	; 16
    1df2:	91 05       	cpc	r25, r1
    1df4:	69 f1       	breq	.+90     	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1df6:	2f c0       	rjmp	.+94     	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1df8:	87 e0       	ldi	r24, 0x07	; 7
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	2e c0       	rjmp	.+92     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dfe:	88 e0       	ldi	r24, 0x08	; 8
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	2b c0       	rjmp	.+86     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e04:	89 e0       	ldi	r24, 0x09	; 9
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	28 c0       	rjmp	.+80     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e0a:	85 e2       	ldi	r24, 0x25	; 37
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	25 c0       	rjmp	.+74     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e10:	84 e0       	ldi	r24, 0x04	; 4
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	22 c0       	rjmp	.+68     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	1c c0       	rjmp	.+56     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e22:	8a e2       	ldi	r24, 0x2A	; 42
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	19 c0       	rjmp	.+50     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	16 c0       	rjmp	.+44     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	13 c0       	rjmp	.+38     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	10 c0       	rjmp	.+32     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e3a:	8d e2       	ldi	r24, 0x2D	; 45
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e40:	8d e0       	ldi	r24, 0x0D	; 13
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	0a c0       	rjmp	.+20     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e4a:	8d e3       	ldi	r24, 0x3D	; 61
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e50:	8b e2       	ldi	r24, 0x2B	; 43
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	2e 97       	sbiw	r28, 0x0e	; 14
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 ea       	ldi	r26, 0xA0	; 160
    1e98:	b1 e4       	ldi	r27, 0x41	; 65
    1e9a:	8b 87       	std	Y+11, r24	; 0x0b
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c
    1e9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8f 83       	std	Y+7, r24	; 0x07
    1ebc:	98 87       	std	Y+8, r25	; 0x08
    1ebe:	a9 87       	std	Y+9, r26	; 0x09
    1ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_init+0x7a>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_init+0xda>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_init+0xc8>
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_init+0xbc>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_init+0x104>
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	6f ef       	ldi	r22, 0xFF	; 255
    1f7a:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f7e:	88 e3       	ldi	r24, 0x38	; 56
    1f80:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f84:	8c e0       	ldi	r24, 0x0C	; 12
    1f86:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_sendCommand>
}
    1f90:	2e 96       	adiw	r28, 0x0e	; 14
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	e9 97       	sbiw	r28, 0x39	; 57
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8d ab       	std	Y+53, r24	; 0x35
    1fcc:	9e ab       	std	Y+54, r25	; 0x36
    1fce:	af ab       	std	Y+55, r26	; 0x37
    1fd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	89 ab       	std	Y+49, r24	; 0x31
    1fec:	9a ab       	std	Y+50, r25	; 0x32
    1fee:	ab ab       	std	Y+51, r26	; 0x33
    1ff0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_sendCommand+0x72>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6d a9       	ldd	r22, Y+53	; 0x35
    202e:	7e a9       	ldd	r23, Y+54	; 0x36
    2030:	8f a9       	ldd	r24, Y+55	; 0x37
    2032:	98 ad       	ldd	r25, Y+56	; 0x38
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_sendCommand+0xd2>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e a7       	std	Y+46, r25	; 0x2e
    205c:	8d a7       	std	Y+45, r24	; 0x2d
    205e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2060:	9e a5       	ldd	r25, Y+46	; 0x2e
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0xc0>
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8f a5       	ldd	r24, Y+47	; 0x2f
    206c:	98 a9       	ldd	r25, Y+48	; 0x30
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	98 ab       	std	Y+48, r25	; 0x30
    2072:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8f a5       	ldd	r24, Y+47	; 0x2f
    2076:	98 a9       	ldd	r25, Y+48	; 0x30
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_sendCommand+0xb4>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	69 a9       	ldd	r22, Y+49	; 0x31
    2080:	7a a9       	ldd	r23, Y+50	; 0x32
    2082:	8b a9       	ldd	r24, Y+51	; 0x33
    2084:	9c a9       	ldd	r25, Y+52	; 0x34
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	98 ab       	std	Y+48, r25	; 0x30
    2090:	8f a7       	std	Y+47, r24	; 0x2f
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	9c a7       	std	Y+44, r25	; 0x2c
    2098:	8b a7       	std	Y+43, r24	; 0x2b
    209a:	8b a5       	ldd	r24, Y+43	; 0x2b
    209c:	9c a5       	ldd	r25, Y+44	; 0x2c
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_sendCommand+0xfc>
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e8       	ldi	r26, 0x80	; 128
    20b6:	bf e3       	ldi	r27, 0x3F	; 63
    20b8:	8f a3       	std	Y+39, r24	; 0x27
    20ba:	98 a7       	std	Y+40, r25	; 0x28
    20bc:	a9 a7       	std	Y+41, r26	; 0x29
    20be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6f a1       	ldd	r22, Y+39	; 0x27
    20c2:	78 a5       	ldd	r23, Y+40	; 0x28
    20c4:	89 a5       	ldd	r24, Y+41	; 0x29
    20c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8b a3       	std	Y+35, r24	; 0x23
    20da:	9c a3       	std	Y+36, r25	; 0x24
    20dc:	ad a3       	std	Y+37, r26	; 0x25
    20de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e0:	6b a1       	ldd	r22, Y+35	; 0x23
    20e2:	7c a1       	ldd	r23, Y+36	; 0x24
    20e4:	8d a1       	ldd	r24, Y+37	; 0x25
    20e6:	9e a1       	ldd	r25, Y+38	; 0x26
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <LCD_sendCommand+0x160>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2102:	6b a1       	ldd	r22, Y+35	; 0x23
    2104:	7c a1       	ldd	r23, Y+36	; 0x24
    2106:	8d a1       	ldd	r24, Y+37	; 0x25
    2108:	9e a1       	ldd	r25, Y+38	; 0x26
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6f a1       	ldd	r22, Y+39	; 0x27
    211c:	78 a5       	ldd	r23, Y+40	; 0x28
    211e:	89 a5       	ldd	r24, Y+41	; 0x29
    2120:	9a a5       	ldd	r25, Y+42	; 0x2a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9a a3       	std	Y+34, r25	; 0x22
    2140:	89 a3       	std	Y+33, r24	; 0x21
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <LCD_sendCommand+0x1c0>
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
    214c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    214e:	98 a1       	ldd	r25, Y+32	; 0x20
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_sendCommand+0x1ae>
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	89 a1       	ldd	r24, Y+33	; 0x21
    215a:	9a a1       	ldd	r25, Y+34	; 0x22
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	89 a1       	ldd	r24, Y+33	; 0x21
    2164:	9a a1       	ldd	r25, Y+34	; 0x22
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <LCD_sendCommand+0x1a2>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6b a1       	ldd	r22, Y+35	; 0x23
    216e:	7c a1       	ldd	r23, Y+36	; 0x24
    2170:	8d a1       	ldd	r24, Y+37	; 0x25
    2172:	9e a1       	ldd	r25, Y+38	; 0x26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9a a3       	std	Y+34, r25	; 0x22
    217e:	89 a3       	std	Y+33, r24	; 0x21
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
    2188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_sendCommand+0x1ea>
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	69 ad       	ldd	r22, Y+57	; 0x39
    2198:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e8       	ldi	r26, 0x80	; 128
    21a2:	bf e3       	ldi	r27, 0x3F	; 63
    21a4:	89 8f       	std	Y+25, r24	; 0x19
    21a6:	9a 8f       	std	Y+26, r25	; 0x1a
    21a8:	ab 8f       	std	Y+27, r26	; 0x1b
    21aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	69 8d       	ldd	r22, Y+25	; 0x19
    21ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8d 8b       	std	Y+21, r24	; 0x15
    21c6:	9e 8b       	std	Y+22, r25	; 0x16
    21c8:	af 8b       	std	Y+23, r26	; 0x17
    21ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <LCD_sendCommand+0x24c>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	69 8d       	ldd	r22, Y+25	; 0x19
    2208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	0f c0       	rjmp	.+30     	; 0x224e <LCD_sendCommand+0x2ac>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	89 8b       	std	Y+17, r24	; 0x11
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	9a 89       	ldd	r25, Y+18	; 0x12
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_sendCommand+0x29a>
    2240:	9a 8b       	std	Y+18, r25	; 0x12
    2242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8b 89       	ldd	r24, Y+19	; 0x13
    2246:	9c 89       	ldd	r25, Y+20	; 0x14
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <LCD_sendCommand+0x28e>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	98 8b       	std	Y+16, r25	; 0x10
    2272:	8f 87       	std	Y+15, r24	; 0x0f
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	98 89       	ldd	r25, Y+16	; 0x10
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_sendCommand+0x2d6>
    227c:	98 8b       	std	Y+16, r25	; 0x10
    227e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e8       	ldi	r26, 0x80	; 128
    2290:	bf e3       	ldi	r27, 0x3F	; 63
    2292:	8b 87       	std	Y+11, r24	; 0x0b
    2294:	9c 87       	std	Y+12, r25	; 0x0c
    2296:	ad 87       	std	Y+13, r26	; 0x0d
    2298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8f 83       	std	Y+7, r24	; 0x07
    22b4:	98 87       	std	Y+8, r25	; 0x08
    22b6:	a9 87       	std	Y+9, r26	; 0x09
    22b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <LCD_sendCommand+0x33a>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	3f c0       	rjmp	.+126    	; 0x235a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	0f c0       	rjmp	.+30     	; 0x233c <LCD_sendCommand+0x39a>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_sendCommand+0x388>
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <LCD_sendCommand+0x37c>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_sendCommand+0x3c4>
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    236e:	e9 96       	adiw	r28, 0x39	; 57
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	e9 97       	sbiw	r28, 0x39	; 57
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	8d ab       	std	Y+53, r24	; 0x35
    23aa:	9e ab       	std	Y+54, r25	; 0x36
    23ac:	af ab       	std	Y+55, r26	; 0x37
    23ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	6d a9       	ldd	r22, Y+53	; 0x35
    23b2:	7e a9       	ldd	r23, Y+54	; 0x36
    23b4:	8f a9       	ldd	r24, Y+55	; 0x37
    23b6:	98 ad       	ldd	r25, Y+56	; 0x38
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a ef       	ldi	r20, 0xFA	; 250
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	89 ab       	std	Y+49, r24	; 0x31
    23ca:	9a ab       	std	Y+50, r25	; 0x32
    23cc:	ab ab       	std	Y+51, r26	; 0x33
    23ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	7a a9       	ldd	r23, Y+50	; 0x32
    23f6:	8b a9       	ldd	r24, Y+51	; 0x33
    23f8:	9c a9       	ldd	r25, Y+52	; 0x34
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	6d a9       	ldd	r22, Y+53	; 0x35
    240c:	7e a9       	ldd	r23, Y+54	; 0x36
    240e:	8f a9       	ldd	r24, Y+55	; 0x37
    2410:	98 ad       	ldd	r25, Y+56	; 0x38
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	98 ab       	std	Y+48, r25	; 0x30
    2430:	8f a7       	std	Y+47, r24	; 0x2f
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_displayCharacter+0xd2>
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9e a7       	std	Y+46, r25	; 0x2e
    243a:	8d a7       	std	Y+45, r24	; 0x2d
    243c:	8d a5       	ldd	r24, Y+45	; 0x2d
    243e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_displayCharacter+0xc0>
    2444:	9e a7       	std	Y+46, r25	; 0x2e
    2446:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8f a5       	ldd	r24, Y+47	; 0x2f
    244a:	98 a9       	ldd	r25, Y+48	; 0x30
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_displayCharacter+0xb4>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	98 ab       	std	Y+48, r25	; 0x30
    246e:	8f a7       	std	Y+47, r24	; 0x2f
    2470:	8f a5       	ldd	r24, Y+47	; 0x2f
    2472:	98 a9       	ldd	r25, Y+48	; 0x30
    2474:	9c a7       	std	Y+44, r25	; 0x2c
    2476:	8b a7       	std	Y+43, r24	; 0x2b
    2478:	8b a5       	ldd	r24, Y+43	; 0x2b
    247a:	9c a5       	ldd	r25, Y+44	; 0x2c
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_displayCharacter+0xfc>
    2480:	9c a7       	std	Y+44, r25	; 0x2c
    2482:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8f a3       	std	Y+39, r24	; 0x27
    2498:	98 a7       	std	Y+40, r25	; 0x28
    249a:	a9 a7       	std	Y+41, r26	; 0x29
    249c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6f a1       	ldd	r22, Y+39	; 0x27
    24a0:	78 a5       	ldd	r23, Y+40	; 0x28
    24a2:	89 a5       	ldd	r24, Y+41	; 0x29
    24a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8b a3       	std	Y+35, r24	; 0x23
    24b8:	9c a3       	std	Y+36, r25	; 0x24
    24ba:	ad a3       	std	Y+37, r26	; 0x25
    24bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9a a3       	std	Y+34, r25	; 0x22
    24dc:	89 a3       	std	Y+33, r24	; 0x21
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6f a1       	ldd	r22, Y+39	; 0x27
    24fa:	78 a5       	ldd	r23, Y+40	; 0x28
    24fc:	89 a5       	ldd	r24, Y+41	; 0x29
    24fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9a a3       	std	Y+34, r25	; 0x22
    251e:	89 a3       	std	Y+33, r24	; 0x21
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_displayCharacter+0x1c0>
    2522:	88 ec       	ldi	r24, 0xC8	; 200
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
    252a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252c:	98 a1       	ldd	r25, Y+32	; 0x20
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_displayCharacter+0x1ae>
    2532:	98 a3       	std	Y+32, r25	; 0x20
    2534:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_displayCharacter+0x1a2>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9a a3       	std	Y+34, r25	; 0x22
    255c:	89 a3       	std	Y+33, r24	; 0x21
    255e:	89 a1       	ldd	r24, Y+33	; 0x21
    2560:	9a a1       	ldd	r25, Y+34	; 0x22
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
    2566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2568:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_displayCharacter+0x1ea>
    256e:	9e 8f       	std	Y+30, r25	; 0x1e
    2570:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	69 ad       	ldd	r22, Y+57	; 0x39
    2576:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a0 e8       	ldi	r26, 0x80	; 128
    2580:	bf e3       	ldi	r27, 0x3F	; 63
    2582:	89 8f       	std	Y+25, r24	; 0x19
    2584:	9a 8f       	std	Y+26, r25	; 0x1a
    2586:	ab 8f       	std	Y+27, r26	; 0x1b
    2588:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	69 8d       	ldd	r22, Y+25	; 0x19
    258c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a ef       	ldi	r20, 0xFA	; 250
    2598:	54 e4       	ldi	r21, 0x44	; 68
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8d 8b       	std	Y+21, r24	; 0x15
    25a4:	9e 8b       	std	Y+22, r25	; 0x16
    25a6:	af 8b       	std	Y+23, r26	; 0x17
    25a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25aa:	6d 89       	ldd	r22, Y+21	; 0x15
    25ac:	7e 89       	ldd	r23, Y+22	; 0x16
    25ae:	8f 89       	ldd	r24, Y+23	; 0x17
    25b0:	98 8d       	ldd	r25, Y+24	; 0x18
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	8b 8b       	std	Y+19, r24	; 0x13
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    25cc:	6d 89       	ldd	r22, Y+21	; 0x15
    25ce:	7e 89       	ldd	r23, Y+22	; 0x16
    25d0:	8f 89       	ldd	r24, Y+23	; 0x17
    25d2:	98 8d       	ldd	r25, Y+24	; 0x18
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	4c f5       	brge	.+82     	; 0x2636 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	69 8d       	ldd	r22, Y+25	; 0x19
    25e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9c 8b       	std	Y+20, r25	; 0x14
    260a:	8b 8b       	std	Y+19, r24	; 0x13
    260c:	0f c0       	rjmp	.+30     	; 0x262c <LCD_displayCharacter+0x2ac>
    260e:	88 ec       	ldi	r24, 0xC8	; 200
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9a 8b       	std	Y+18, r25	; 0x12
    2614:	89 8b       	std	Y+17, r24	; 0x11
    2616:	89 89       	ldd	r24, Y+17	; 0x11
    2618:	9a 89       	ldd	r25, Y+18	; 0x12
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_displayCharacter+0x29a>
    261e:	9a 8b       	std	Y+18, r25	; 0x12
    2620:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	8b 89       	ldd	r24, Y+19	; 0x13
    2624:	9c 89       	ldd	r25, Y+20	; 0x14
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <LCD_displayCharacter+0x28e>
    2634:	14 c0       	rjmp	.+40     	; 0x265e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	6d 89       	ldd	r22, Y+21	; 0x15
    2638:	7e 89       	ldd	r23, Y+22	; 0x16
    263a:	8f 89       	ldd	r24, Y+23	; 0x17
    263c:	98 8d       	ldd	r25, Y+24	; 0x18
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9c 8b       	std	Y+20, r25	; 0x14
    2648:	8b 8b       	std	Y+19, r24	; 0x13
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	98 8b       	std	Y+16, r25	; 0x10
    2650:	8f 87       	std	Y+15, r24	; 0x0f
    2652:	8f 85       	ldd	r24, Y+15	; 0x0f
    2654:	98 89       	ldd	r25, Y+16	; 0x10
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_displayCharacter+0x2d6>
    265a:	98 8b       	std	Y+16, r25	; 0x10
    265c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e8       	ldi	r26, 0x80	; 128
    266e:	bf e3       	ldi	r27, 0x3F	; 63
    2670:	8b 87       	std	Y+11, r24	; 0x0b
    2672:	9c 87       	std	Y+12, r25	; 0x0c
    2674:	ad 87       	std	Y+13, r26	; 0x0d
    2676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2678:	6b 85       	ldd	r22, Y+11	; 0x0b
    267a:	7c 85       	ldd	r23, Y+12	; 0x0c
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a ef       	ldi	r20, 0xFA	; 250
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8f 83       	std	Y+7, r24	; 0x07
    2692:	98 87       	std	Y+8, r25	; 0x08
    2694:	a9 87       	std	Y+9, r26	; 0x09
    2696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	2c f4       	brge	.+10     	; 0x26ba <LCD_displayCharacter+0x33a>
		__ticks = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9e 83       	std	Y+6, r25	; 0x06
    26b6:	8d 83       	std	Y+5, r24	; 0x05
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	4c f5       	brge	.+82     	; 0x2724 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
    26fa:	0f c0       	rjmp	.+30     	; 0x271a <LCD_displayCharacter+0x39a>
    26fc:	88 ec       	ldi	r24, 0xC8	; 200
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	8b 83       	std	Y+3, r24	; 0x03
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_displayCharacter+0x388>
    270c:	9c 83       	std	Y+4, r25	; 0x04
    270e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	69 f7       	brne	.-38     	; 0x26fc <LCD_displayCharacter+0x37c>
    2722:	14 c0       	rjmp	.+40     	; 0x274c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	8d 83       	std	Y+5, r24	; 0x05
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_displayCharacter+0x3c4>
    2748:	9a 83       	std	Y+2, r25	; 0x02
    274a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    274c:	e9 96       	adiw	r28, 0x39	; 57
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <LCD_displayString+0x6>
    2764:	0f 92       	push	r0
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9b 83       	std	Y+3, r25	; 0x03
    276c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    276e:	19 82       	std	Y+1, r1	; 0x01
    2770:	0e c0       	rjmp	.+28     	; 0x278e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	9b 81       	ldd	r25, Y+3	; 0x03
    277c:	fc 01       	movw	r30, r24
    277e:	e2 0f       	add	r30, r18
    2780:	f3 1f       	adc	r31, r19
    2782:	80 81       	ld	r24, Z
    2784:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_displayCharacter>
		i++;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	9b 81       	ldd	r25, Y+3	; 0x03
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	80 81       	ld	r24, Z
    27a0:	88 23       	and	r24, r24
    27a2:	39 f7       	brne	.-50     	; 0x2772 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <LCD_moveCursor+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <LCD_moveCursor+0x8>
    27b8:	0f 92       	push	r0
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	3d 83       	std	Y+5, r19	; 0x05
    27ca:	2c 83       	std	Y+4, r18	; 0x04
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	91 05       	cpc	r25, r1
    27d4:	c1 f0       	breq	.+48     	; 0x2806 <LCD_moveCursor+0x56>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	2c f4       	brge	.+10     	; 0x27ea <LCD_moveCursor+0x3a>
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	9d 81       	ldd	r25, Y+5	; 0x05
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	61 f0       	breq	.+24     	; 0x2800 <LCD_moveCursor+0x50>
    27e8:	19 c0       	rjmp	.+50     	; 0x281c <LCD_moveCursor+0x6c>
    27ea:	2c 81       	ldd	r18, Y+4	; 0x04
    27ec:	3d 81       	ldd	r19, Y+5	; 0x05
    27ee:	22 30       	cpi	r18, 0x02	; 2
    27f0:	31 05       	cpc	r19, r1
    27f2:	69 f0       	breq	.+26     	; 0x280e <LCD_moveCursor+0x5e>
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	91 05       	cpc	r25, r1
    27fc:	61 f0       	breq	.+24     	; 0x2816 <LCD_moveCursor+0x66>
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	0b c0       	rjmp	.+22     	; 0x281c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	80 5c       	subi	r24, 0xC0	; 192
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	07 c0       	rjmp	.+14     	; 0x281c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	80 5f       	subi	r24, 0xF0	; 240
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	03 c0       	rjmp	.+6      	; 0x281c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	80 5b       	subi	r24, 0xB0	; 176
    281a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	80 68       	ori	r24, 0x80	; 128
    2820:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_sendCommand>
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <LCD_displayStringRowColumn+0x6>
    283a:	00 d0       	rcall	.+0      	; 0x283c <LCD_displayStringRowColumn+0x8>
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	6a 83       	std	Y+2, r22	; 0x02
    2844:	5c 83       	std	Y+4, r21	; 0x04
    2846:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	6a 81       	ldd	r22, Y+2	; 0x02
    284c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	62 97       	sbiw	r28, 0x12	; 18
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	9a 8b       	std	Y+18, r25	; 0x12
    287c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    287e:	89 89       	ldd	r24, Y+17	; 0x11
    2880:	9a 89       	ldd	r25, Y+18	; 0x12
    2882:	9e 01       	movw	r18, r28
    2884:	2f 5f       	subi	r18, 0xFF	; 255
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	b9 01       	movw	r22, r18
    288a:	4a e0       	ldi	r20, 0x0A	; 10
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	0e 94 44 18 	call	0x3088	; 0x3088 <itoa>
   LCD_displayString(buff); /* Display the string */
    2892:	ce 01       	movw	r24, r28
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	0e 94 af 13 	call	0x275e	; 0x275e <LCD_displayString>
}
    289a:	62 96       	adiw	r28, 0x12	; 18
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_sendCommand>
}
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <Timer_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <Timer_init+0x6>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <Timer_init+0x8>
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    28d0:	e9 81       	ldd	r30, Y+1	; 0x01
    28d2:	fa 81       	ldd	r31, Y+2	; 0x02
    28d4:	84 81       	ldd	r24, Z+4	; 0x04
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	3c 83       	std	Y+4, r19	; 0x04
    28dc:	2b 83       	std	Y+3, r18	; 0x03
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	9c 81       	ldd	r25, Y+4	; 0x04
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	91 05       	cpc	r25, r1
    28e6:	09 f4       	brne	.+2      	; 0x28ea <Timer_init+0x2a>
    28e8:	42 c0       	rjmp	.+132    	; 0x296e <Timer_init+0xae>
    28ea:	2b 81       	ldd	r18, Y+3	; 0x03
    28ec:	3c 81       	ldd	r19, Y+4	; 0x04
    28ee:	22 30       	cpi	r18, 0x02	; 2
    28f0:	31 05       	cpc	r19, r1
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <Timer_init+0x36>
    28f4:	77 c0       	rjmp	.+238    	; 0x29e4 <Timer_init+0x124>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	09 f0       	breq	.+2      	; 0x2900 <Timer_init+0x40>
    28fe:	a8 c0       	rjmp	.+336    	; 0x2a50 <Timer_init+0x190>
	{
	case TIMER_0:
		TCNT0 = Config_Ptr->timer_InitialValue;
    2900:	a2 e5       	ldi	r26, 0x52	; 82
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e9 81       	ldd	r30, Y+1	; 0x01
    2906:	fa 81       	ldd	r31, Y+2	; 0x02
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == COMPARE)
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	86 81       	ldd	r24, Z+6	; 0x06
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	99 f4       	brne	.+38     	; 0x293e <Timer_init+0x7e>
		{
			TCCR0 =  (1<<FOC0) | (1<<WGM01);
    2918:	e3 e5       	ldi	r30, 0x53	; 83
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	88 e8       	ldi	r24, 0x88	; 136
    291e:	80 83       	st	Z, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    2920:	ac e5       	ldi	r26, 0x5C	; 92
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    292e:	a9 e5       	ldi	r26, 0x59	; 89
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e9 e5       	ldi	r30, 0x59	; 89
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	82 60       	ori	r24, 0x02	; 2
    293a:	8c 93       	st	X, r24
    293c:	0b c0       	rjmp	.+22     	; 0x2954 <Timer_init+0x94>
		}
		else
		{
			TCCR0 =  (1<<FOC0);
    293e:	e3 e5       	ldi	r30, 0x53	; 83
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 e8       	ldi	r24, 0x80	; 128
    2944:	80 83       	st	Z, r24
			TIMSK |= (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    2946:	a9 e5       	ldi	r26, 0x59	; 89
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e9 e5       	ldi	r30, 0x59	; 89
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	8c 93       	st	X, r24
		}
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    2954:	a3 e5       	ldi	r26, 0x53	; 83
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e3 e5       	ldi	r30, 0x53	; 83
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	98 2f       	mov	r25, r24
    2960:	98 7f       	andi	r25, 0xF8	; 248
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	85 81       	ldd	r24, Z+5	; 0x05
    2968:	89 2b       	or	r24, r25
    296a:	8c 93       	st	X, r24
    296c:	71 c0       	rjmp	.+226    	; 0x2a50 <Timer_init+0x190>
		break;

	case TIMER_1:
		TCNT1 = Config_Ptr->timer_InitialValue;
    296e:	ac e4       	ldi	r26, 0x4C	; 76
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode == COMPARE)
    2980:	e9 81       	ldd	r30, Y+1	; 0x01
    2982:	fa 81       	ldd	r31, Y+2	; 0x02
    2984:	86 81       	ldd	r24, Z+6	; 0x06
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	a9 f4       	brne	.+42     	; 0x29b4 <Timer_init+0xf4>
		{
			TCCR1A =  (1<<FOC1A) | (1<<FOC1B) | (1<<WGM12);
    298a:	ef e4       	ldi	r30, 0x4F	; 79
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	8c e0       	ldi	r24, 0x0C	; 12
    2990:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    2992:	aa e4       	ldi	r26, 0x4A	; 74
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	93 81       	ldd	r25, Z+3	; 0x03
    299e:	11 96       	adiw	r26, 0x01	; 1
    29a0:	9c 93       	st	X, r25
    29a2:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare Interrupt */
    29a4:	a9 e5       	ldi	r26, 0x59	; 89
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e9 e5       	ldi	r30, 0x59	; 89
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	80 61       	ori	r24, 0x10	; 16
    29b0:	8c 93       	st	X, r24
    29b2:	0b c0       	rjmp	.+22     	; 0x29ca <Timer_init+0x10a>
		}
		else
		{
			TCCR1A =  (1<<FOC1A) | (1<<FOC1B);
    29b4:	ef e4       	ldi	r30, 0x4F	; 79
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	8c e0       	ldi	r24, 0x0C	; 12
    29ba:	80 83       	st	Z, r24
			TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
    29bc:	a9 e5       	ldi	r26, 0x59	; 89
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e9 e5       	ldi	r30, 0x59	; 89
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	84 60       	ori	r24, 0x04	; 4
    29c8:	8c 93       	st	X, r24
		}
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    29ca:	ae e4       	ldi	r26, 0x4E	; 78
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	ee e4       	ldi	r30, 0x4E	; 78
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	98 2f       	mov	r25, r24
    29d6:	98 7f       	andi	r25, 0xF8	; 248
    29d8:	e9 81       	ldd	r30, Y+1	; 0x01
    29da:	fa 81       	ldd	r31, Y+2	; 0x02
    29dc:	85 81       	ldd	r24, Z+5	; 0x05
    29de:	89 2b       	or	r24, r25
    29e0:	8c 93       	st	X, r24
    29e2:	36 c0       	rjmp	.+108    	; 0x2a50 <Timer_init+0x190>
		break;

	case TIMER_2:
		TCNT2 = Config_Ptr->timer_InitialValue; /* Set initial value */
    29e4:	a4 e4       	ldi	r26, 0x44	; 68
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ea:	fa 81       	ldd	r31, Y+2	; 0x02
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == COMPARE)
    29f2:	e9 81       	ldd	r30, Y+1	; 0x01
    29f4:	fa 81       	ldd	r31, Y+2	; 0x02
    29f6:	86 81       	ldd	r24, Z+6	; 0x06
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	99 f4       	brne	.+38     	; 0x2a22 <Timer_init+0x162>
		{
			TCCR2 =  (1<<FOC2) | (1<<WGM21);
    29fc:	e5 e4       	ldi	r30, 0x45	; 69
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	88 e8       	ldi	r24, 0x88	; 136
    2a02:	80 83       	st	Z, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    2a04:	a3 e4       	ldi	r26, 0x43	; 67
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2); /* Enable Timer2 Compare Interrupt */
    2a12:	a9 e5       	ldi	r26, 0x59	; 89
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e9 e5       	ldi	r30, 0x59	; 89
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	80 68       	ori	r24, 0x80	; 128
    2a1e:	8c 93       	st	X, r24
    2a20:	0b c0       	rjmp	.+22     	; 0x2a38 <Timer_init+0x178>
		}
		else
		{
			TCCR2 =  (1<<FOC1A);
    2a22:	e5 e4       	ldi	r30, 0x45	; 69
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	88 e0       	ldi	r24, 0x08	; 8
    2a28:	80 83       	st	Z, r24
			TIMSK |= (1<<TOIE2); /* Enable Timer2 Overflow Interrupt */
    2a2a:	a9 e5       	ldi	r26, 0x59	; 89
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e9 e5       	ldi	r30, 0x59	; 89
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	80 64       	ori	r24, 0x40	; 64
    2a36:	8c 93       	st	X, r24
		}
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock);
    2a38:	a5 e4       	ldi	r26, 0x45	; 69
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e5 e4       	ldi	r30, 0x45	; 69
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	98 2f       	mov	r25, r24
    2a44:	98 7f       	andi	r25, 0xF8	; 248
    2a46:	e9 81       	ldd	r30, Y+1	; 0x01
    2a48:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4a:	85 81       	ldd	r24, Z+5	; 0x05
    2a4c:	89 2b       	or	r24, r25
    2a4e:	8c 93       	st	X, r24
		break;
	}
}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <Timer_deInit>:

/*
 * Description :
 * Function to disable the Timer via Timer_ID.
 */
void Timer_deInit(Timer_ID_Type timer_ID) {
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <Timer_deInit+0x6>
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_ID) {
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	3b 83       	std	Y+3, r19	; 0x03
    2a74:	2a 83       	std	Y+2, r18	; 0x02
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	81 30       	cpi	r24, 0x01	; 1
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	c1 f0       	breq	.+48     	; 0x2ab0 <Timer_deInit+0x52>
    2a80:	2a 81       	ldd	r18, Y+2	; 0x02
    2a82:	3b 81       	ldd	r19, Y+3	; 0x03
    2a84:	22 30       	cpi	r18, 0x02	; 2
    2a86:	31 05       	cpc	r19, r1
    2a88:	11 f1       	breq	.+68     	; 0x2ace <Timer_deInit+0x70>
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	61 f5       	brne	.+88     	; 0x2aea <Timer_deInit+0x8c>
        case TIMER_0:
            TCCR0 = 0;
    2a92:	e3 e5       	ldi	r30, 0x53	; 83
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE0) | (1 << TOIE0));
    2a98:	a9 e5       	ldi	r26, 0x59	; 89
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e9 e5       	ldi	r30, 0x59	; 89
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8c 7f       	andi	r24, 0xFC	; 252
    2aa4:	8c 93       	st	X, r24
            g_timer0Callback = NULL_PTR;
    2aa6:	10 92 36 01 	sts	0x0136, r1
    2aaa:	10 92 35 01 	sts	0x0135, r1
    2aae:	1d c0       	rjmp	.+58     	; 0x2aea <Timer_deInit+0x8c>
            break;
        case TIMER_1:
            TCCR1B = 0;
    2ab0:	ee e4       	ldi	r30, 0x4E	; 78
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE1A) | (1 << TOIE1));
    2ab6:	a9 e5       	ldi	r26, 0x59	; 89
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e9 e5       	ldi	r30, 0x59	; 89
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	8b 7e       	andi	r24, 0xEB	; 235
    2ac2:	8c 93       	st	X, r24
            g_timer1Callback = NULL_PTR;
    2ac4:	10 92 38 01 	sts	0x0138, r1
    2ac8:	10 92 37 01 	sts	0x0137, r1
    2acc:	0e c0       	rjmp	.+28     	; 0x2aea <Timer_deInit+0x8c>
            break;
        case TIMER_2:
            TCCR2 = 0;
    2ace:	e5 e4       	ldi	r30, 0x45	; 69
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	10 82       	st	Z, r1
            TIMSK &= ~((1 << OCIE2) | (1 << TOIE2));
    2ad4:	a9 e5       	ldi	r26, 0x59	; 89
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e9 e5       	ldi	r30, 0x59	; 89
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	8f 73       	andi	r24, 0x3F	; 63
    2ae0:	8c 93       	st	X, r24
            g_timer2Callback = NULL_PTR;
    2ae2:	10 92 3a 01 	sts	0x013A, r1
    2ae6:	10 92 39 01 	sts	0x0139, r1
            break;
    }
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <Timer_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address to the required Timer.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <Timer_setCallBack+0x6>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <Timer_setCallBack+0x8>
    2afe:	0f 92       	push	r0
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	3d 83       	std	Y+5, r19	; 0x05
    2b12:	2c 83       	std	Y+4, r18	; 0x04
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
    2b16:	9d 81       	ldd	r25, Y+5	; 0x05
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	81 f0       	breq	.+32     	; 0x2b3e <Timer_setCallBack+0x48>
    2b1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b20:	3d 81       	ldd	r19, Y+5	; 0x05
    2b22:	22 30       	cpi	r18, 0x02	; 2
    2b24:	31 05       	cpc	r19, r1
    2b26:	91 f0       	breq	.+36     	; 0x2b4c <Timer_setCallBack+0x56>
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	a1 f4       	brne	.+40     	; 0x2b58 <Timer_setCallBack+0x62>
	{
	case TIMER_0:
		g_timer0Callback = a_ptr;
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	90 93 36 01 	sts	0x0136, r25
    2b38:	80 93 35 01 	sts	0x0135, r24
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <Timer_setCallBack+0x62>
		break;
	case TIMER_1:
		g_timer1Callback = a_ptr;
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	90 93 38 01 	sts	0x0138, r25
    2b46:	80 93 37 01 	sts	0x0137, r24
    2b4a:	06 c0       	rjmp	.+12     	; 0x2b58 <Timer_setCallBack+0x62>
		break;
	case TIMER_2:
		g_timer2Callback = a_ptr;
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	90 93 3a 01 	sts	0x013A, r25
    2b54:	80 93 39 01 	sts	0x0139, r24
		break;
	}
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <__vector_10>:

/* Interrupt Service Routines */
ISR(TIMER0_COMP_vect)
{
    2b68:	1f 92       	push	r1
    2b6a:	0f 92       	push	r0
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	0f 92       	push	r0
    2b70:	11 24       	eor	r1, r1
    2b72:	2f 93       	push	r18
    2b74:	3f 93       	push	r19
    2b76:	4f 93       	push	r20
    2b78:	5f 93       	push	r21
    2b7a:	6f 93       	push	r22
    2b7c:	7f 93       	push	r23
    2b7e:	8f 93       	push	r24
    2b80:	9f 93       	push	r25
    2b82:	af 93       	push	r26
    2b84:	bf 93       	push	r27
    2b86:	ef 93       	push	r30
    2b88:	ff 93       	push	r31
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0Callback != NULL_PTR)
    2b92:	80 91 35 01 	lds	r24, 0x0135
    2b96:	90 91 36 01 	lds	r25, 0x0136
    2b9a:	00 97       	sbiw	r24, 0x00	; 0
    2b9c:	29 f0       	breq	.+10     	; 0x2ba8 <__vector_10+0x40>
	{
		g_timer0Callback();
    2b9e:	e0 91 35 01 	lds	r30, 0x0135
    2ba2:	f0 91 36 01 	lds	r31, 0x0136
    2ba6:	09 95       	icall
	}
}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	ff 91       	pop	r31
    2bae:	ef 91       	pop	r30
    2bb0:	bf 91       	pop	r27
    2bb2:	af 91       	pop	r26
    2bb4:	9f 91       	pop	r25
    2bb6:	8f 91       	pop	r24
    2bb8:	7f 91       	pop	r23
    2bba:	6f 91       	pop	r22
    2bbc:	5f 91       	pop	r21
    2bbe:	4f 91       	pop	r20
    2bc0:	3f 91       	pop	r19
    2bc2:	2f 91       	pop	r18
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0Callback != NULL_PTR)
    2bf8:	80 91 35 01 	lds	r24, 0x0135
    2bfc:	90 91 36 01 	lds	r25, 0x0136
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	29 f0       	breq	.+10     	; 0x2c0e <__vector_11+0x40>
	{
		g_timer0Callback();
    2c04:	e0 91 35 01 	lds	r30, 0x0135
    2c08:	f0 91 36 01 	lds	r31, 0x0136
    2c0c:	09 95       	icall
	}
}
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	ff 91       	pop	r31
    2c14:	ef 91       	pop	r30
    2c16:	bf 91       	pop	r27
    2c18:	af 91       	pop	r26
    2c1a:	9f 91       	pop	r25
    2c1c:	8f 91       	pop	r24
    2c1e:	7f 91       	pop	r23
    2c20:	6f 91       	pop	r22
    2c22:	5f 91       	pop	r21
    2c24:	4f 91       	pop	r20
    2c26:	3f 91       	pop	r19
    2c28:	2f 91       	pop	r18
    2c2a:	0f 90       	pop	r0
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	0f 90       	pop	r0
    2c30:	1f 90       	pop	r1
    2c32:	18 95       	reti

00002c34 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    2c34:	1f 92       	push	r1
    2c36:	0f 92       	push	r0
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	0f 92       	push	r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1Callback != NULL_PTR) {
    2c5e:	80 91 37 01 	lds	r24, 0x0137
    2c62:	90 91 38 01 	lds	r25, 0x0138
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	29 f0       	breq	.+10     	; 0x2c74 <__vector_7+0x40>
        g_timer1Callback();
    2c6a:	e0 91 37 01 	lds	r30, 0x0137
    2c6e:	f0 91 38 01 	lds	r31, 0x0138
    2c72:	09 95       	icall
    }
}
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	ff 91       	pop	r31
    2c7a:	ef 91       	pop	r30
    2c7c:	bf 91       	pop	r27
    2c7e:	af 91       	pop	r26
    2c80:	9f 91       	pop	r25
    2c82:	8f 91       	pop	r24
    2c84:	7f 91       	pop	r23
    2c86:	6f 91       	pop	r22
    2c88:	5f 91       	pop	r21
    2c8a:	4f 91       	pop	r20
    2c8c:	3f 91       	pop	r19
    2c8e:	2f 91       	pop	r18
    2c90:	0f 90       	pop	r0
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	0f 90       	pop	r0
    2c96:	1f 90       	pop	r1
    2c98:	18 95       	reti

00002c9a <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2c9a:	1f 92       	push	r1
    2c9c:	0f 92       	push	r0
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	0f 92       	push	r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	2f 93       	push	r18
    2ca6:	3f 93       	push	r19
    2ca8:	4f 93       	push	r20
    2caa:	5f 93       	push	r21
    2cac:	6f 93       	push	r22
    2cae:	7f 93       	push	r23
    2cb0:	8f 93       	push	r24
    2cb2:	9f 93       	push	r25
    2cb4:	af 93       	push	r26
    2cb6:	bf 93       	push	r27
    2cb8:	ef 93       	push	r30
    2cba:	ff 93       	push	r31
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    if (g_timer1Callback != NULL_PTR) {
    2cc4:	80 91 37 01 	lds	r24, 0x0137
    2cc8:	90 91 38 01 	lds	r25, 0x0138
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	29 f0       	breq	.+10     	; 0x2cda <__vector_9+0x40>
        g_timer1Callback();
    2cd0:	e0 91 37 01 	lds	r30, 0x0137
    2cd4:	f0 91 38 01 	lds	r31, 0x0138
    2cd8:	09 95       	icall
    }
}
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	bf 91       	pop	r27
    2ce4:	af 91       	pop	r26
    2ce6:	9f 91       	pop	r25
    2ce8:	8f 91       	pop	r24
    2cea:	7f 91       	pop	r23
    2cec:	6f 91       	pop	r22
    2cee:	5f 91       	pop	r21
    2cf0:	4f 91       	pop	r20
    2cf2:	3f 91       	pop	r19
    2cf4:	2f 91       	pop	r18
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	2f 93       	push	r18
    2d0c:	3f 93       	push	r19
    2d0e:	4f 93       	push	r20
    2d10:	5f 93       	push	r21
    2d12:	6f 93       	push	r22
    2d14:	7f 93       	push	r23
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	af 93       	push	r26
    2d1c:	bf 93       	push	r27
    2d1e:	ef 93       	push	r30
    2d20:	ff 93       	push	r31
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2Callback != NULL_PTR) {
    2d2a:	80 91 39 01 	lds	r24, 0x0139
    2d2e:	90 91 3a 01 	lds	r25, 0x013A
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	29 f0       	breq	.+10     	; 0x2d40 <__vector_4+0x40>
        g_timer2Callback();
    2d36:	e0 91 39 01 	lds	r30, 0x0139
    2d3a:	f0 91 3a 01 	lds	r31, 0x013A
    2d3e:	09 95       	icall
    }
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	ff 91       	pop	r31
    2d46:	ef 91       	pop	r30
    2d48:	bf 91       	pop	r27
    2d4a:	af 91       	pop	r26
    2d4c:	9f 91       	pop	r25
    2d4e:	8f 91       	pop	r24
    2d50:	7f 91       	pop	r23
    2d52:	6f 91       	pop	r22
    2d54:	5f 91       	pop	r21
    2d56:	4f 91       	pop	r20
    2d58:	3f 91       	pop	r19
    2d5a:	2f 91       	pop	r18
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	0f 90       	pop	r0
    2d62:	1f 90       	pop	r1
    2d64:	18 95       	reti

00002d66 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2d66:	1f 92       	push	r1
    2d68:	0f 92       	push	r0
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	0f 92       	push	r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	2f 93       	push	r18
    2d72:	3f 93       	push	r19
    2d74:	4f 93       	push	r20
    2d76:	5f 93       	push	r21
    2d78:	6f 93       	push	r22
    2d7a:	7f 93       	push	r23
    2d7c:	8f 93       	push	r24
    2d7e:	9f 93       	push	r25
    2d80:	af 93       	push	r26
    2d82:	bf 93       	push	r27
    2d84:	ef 93       	push	r30
    2d86:	ff 93       	push	r31
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    if (g_timer2Callback != NULL_PTR) {
    2d90:	80 91 39 01 	lds	r24, 0x0139
    2d94:	90 91 3a 01 	lds	r25, 0x013A
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	29 f0       	breq	.+10     	; 0x2da6 <__vector_5+0x40>
        g_timer2Callback();
    2d9c:	e0 91 39 01 	lds	r30, 0x0139
    2da0:	f0 91 3a 01 	lds	r31, 0x013A
    2da4:	09 95       	icall
    }
}
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	ff 91       	pop	r31
    2dac:	ef 91       	pop	r30
    2dae:	bf 91       	pop	r27
    2db0:	af 91       	pop	r26
    2db2:	9f 91       	pop	r25
    2db4:	8f 91       	pop	r24
    2db6:	7f 91       	pop	r23
    2db8:	6f 91       	pop	r22
    2dba:	5f 91       	pop	r21
    2dbc:	4f 91       	pop	r20
    2dbe:	3f 91       	pop	r19
    2dc0:	2f 91       	pop	r18
    2dc2:	0f 90       	pop	r0
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	0f 90       	pop	r0
    2dc8:	1f 90       	pop	r1
    2dca:	18 95       	reti

00002dcc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <UART_init+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <UART_init+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ddc:	1a 82       	std	Y+2, r1	; 0x02
    2dde:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2de0:	eb e2       	ldi	r30, 0x2B	; 43
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|((Config_Ptr->bit_data)&04);
    2de8:	aa e2       	ldi	r26, 0x2A	; 42
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	eb 81       	ldd	r30, Y+3	; 0x03
    2dee:	fc 81       	ldd	r31, Y+4	; 0x04
    2df0:	80 81       	ld	r24, Z
    2df2:	84 70       	andi	r24, 0x04	; 4
    2df4:	88 61       	ori	r24, 0x18	; 24
    2df6:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	//UCSRC = (1<<URSEL) | ((UCSRC>>1)&00) | ((Config_Ptr->bit_data)<<1);
	UCSRC = (1<<URSEL)  | (((Config_Ptr->bit_data)<<1)&06)|((Config_Ptr->parity)<<5)|((Config_Ptr->stop_bit)<<3);
    2df8:	a0 e4       	ldi	r26, 0x40	; 64
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2e00:	80 81       	ld	r24, Z
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	86 70       	andi	r24, 0x06	; 6
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	20 68       	ori	r18, 0x80	; 128
    2e10:	eb 81       	ldd	r30, Y+3	; 0x03
    2e12:	fc 81       	ldd	r31, Y+4	; 0x04
    2e14:	81 81       	ldd	r24, Z+1	; 0x01
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	82 95       	swap	r24
    2e20:	92 95       	swap	r25
    2e22:	90 7f       	andi	r25, 0xF0	; 240
    2e24:	98 27       	eor	r25, r24
    2e26:	80 7f       	andi	r24, 0xF0	; 240
    2e28:	98 27       	eor	r25, r24
    2e2a:	28 2b       	or	r18, r24
    2e2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	82 2b       	or	r24, r18
    2e44:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	83 81       	ldd	r24, Z+3	; 0x03
    2e4c:	94 81       	ldd	r25, Z+4	; 0x04
    2e4e:	a5 81       	ldd	r26, Z+5	; 0x05
    2e50:	b6 81       	ldd	r27, Z+6	; 0x06
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	aa 1f       	adc	r26, r26
    2e58:	bb 1f       	adc	r27, r27
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	aa 1f       	adc	r26, r26
    2e60:	bb 1f       	adc	r27, r27
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	aa 1f       	adc	r26, r26
    2e68:	bb 1f       	adc	r27, r27
    2e6a:	9c 01       	movw	r18, r24
    2e6c:	ad 01       	movw	r20, r26
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	92 e1       	ldi	r25, 0x12	; 18
    2e72:	aa e7       	ldi	r26, 0x7A	; 122
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__udivmodsi4>
    2e7e:	da 01       	movw	r26, r20
    2e80:	c9 01       	movw	r24, r18
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e88:	e0 e4       	ldi	r30, 0x40	; 64
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e90:	89 2f       	mov	r24, r25
    2e92:	99 27       	eor	r25, r25
    2e94:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e96:	e9 e2       	ldi	r30, 0x29	; 41
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	80 83       	st	Z, r24
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	0f 92       	push	r0
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2eb8:	eb e2       	ldi	r30, 0x2B	; 43
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	80 72       	andi	r24, 0x20	; 32
    2ec4:	90 70       	andi	r25, 0x00	; 0
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	b9 f3       	breq	.-18     	; 0x2eb8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2eca:	ec e2       	ldi	r30, 0x2C	; 44
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ee2:	eb e2       	ldi	r30, 0x2B	; 43
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 23       	and	r24, r24
    2eea:	dc f7       	brge	.-10     	; 0x2ee2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2eec:	ec e2       	ldi	r30, 0x2C	; 44
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <UART_sendString+0x6>
    2efe:	0f 92       	push	r0
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	9b 83       	std	Y+3, r25	; 0x03
    2f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f08:	19 82       	std	Y+1, r1	; 0x01
    2f0a:	0e c0       	rjmp	.+28     	; 0x2f28 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	fc 01       	movw	r30, r24
    2f18:	e2 0f       	add	r30, r18
    2f1a:	f3 1f       	adc	r31, r19
    2f1c:	80 81       	ld	r24, Z
    2f1e:	0e 94 56 17 	call	0x2eac	; 0x2eac <UART_sendByte>
		i++;
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	8f 5f       	subi	r24, 0xFF	; 255
    2f26:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	fc 01       	movw	r30, r24
    2f34:	e2 0f       	add	r30, r18
    2f36:	f3 1f       	adc	r31, r19
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 23       	and	r24, r24
    2f3c:	39 f7       	brne	.-50     	; 0x2f0c <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}

	/* Send the '#' character to signal the end of the string */
	UART_sendByte('#');
    2f3e:	83 e2       	ldi	r24, 0x23	; 35
    2f40:	0e 94 56 17 	call	0x2eac	; 0x2eac <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <UART_receiveString+0xa>
    2f5a:	0f 92       	push	r0
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	9b 83       	std	Y+3, r25	; 0x03
    2f62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f64:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	8c 01       	movw	r16, r24
    2f72:	02 0f       	add	r16, r18
    2f74:	13 1f       	adc	r17, r19
    2f76:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	8c 01       	movw	r16, r24
    2f92:	02 0f       	add	r16, r18
    2f94:	13 1f       	adc	r17, r19
    2f96:	0e 94 6d 17 	call	0x2eda	; 0x2eda <UART_recieveByte>
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e2 0f       	add	r30, r18
    2fac:	f3 1f       	adc	r31, r19
    2fae:	80 81       	ld	r24, Z
    2fb0:	83 32       	cpi	r24, 0x23	; 35
    2fb2:	31 f7       	brne	.-52     	; 0x2f80 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e2 0f       	add	r30, r18
    2fc2:	f3 1f       	adc	r31, r19
    2fc4:	10 82       	st	Z, r1
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

00002fd6 <__udivmodsi4>:
    2fd6:	a1 e2       	ldi	r26, 0x21	; 33
    2fd8:	1a 2e       	mov	r1, r26
    2fda:	aa 1b       	sub	r26, r26
    2fdc:	bb 1b       	sub	r27, r27
    2fde:	fd 01       	movw	r30, r26
    2fe0:	0d c0       	rjmp	.+26     	; 0x2ffc <__udivmodsi4_ep>

00002fe2 <__udivmodsi4_loop>:
    2fe2:	aa 1f       	adc	r26, r26
    2fe4:	bb 1f       	adc	r27, r27
    2fe6:	ee 1f       	adc	r30, r30
    2fe8:	ff 1f       	adc	r31, r31
    2fea:	a2 17       	cp	r26, r18
    2fec:	b3 07       	cpc	r27, r19
    2fee:	e4 07       	cpc	r30, r20
    2ff0:	f5 07       	cpc	r31, r21
    2ff2:	20 f0       	brcs	.+8      	; 0x2ffc <__udivmodsi4_ep>
    2ff4:	a2 1b       	sub	r26, r18
    2ff6:	b3 0b       	sbc	r27, r19
    2ff8:	e4 0b       	sbc	r30, r20
    2ffa:	f5 0b       	sbc	r31, r21

00002ffc <__udivmodsi4_ep>:
    2ffc:	66 1f       	adc	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	88 1f       	adc	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	1a 94       	dec	r1
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <__udivmodsi4_loop>
    3008:	60 95       	com	r22
    300a:	70 95       	com	r23
    300c:	80 95       	com	r24
    300e:	90 95       	com	r25
    3010:	9b 01       	movw	r18, r22
    3012:	ac 01       	movw	r20, r24
    3014:	bd 01       	movw	r22, r26
    3016:	cf 01       	movw	r24, r30
    3018:	08 95       	ret

0000301a <__prologue_saves__>:
    301a:	2f 92       	push	r2
    301c:	3f 92       	push	r3
    301e:	4f 92       	push	r4
    3020:	5f 92       	push	r5
    3022:	6f 92       	push	r6
    3024:	7f 92       	push	r7
    3026:	8f 92       	push	r8
    3028:	9f 92       	push	r9
    302a:	af 92       	push	r10
    302c:	bf 92       	push	r11
    302e:	cf 92       	push	r12
    3030:	df 92       	push	r13
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	ca 1b       	sub	r28, r26
    3044:	db 0b       	sbc	r29, r27
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	f8 94       	cli
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	cd bf       	out	0x3d, r28	; 61
    3050:	09 94       	ijmp

00003052 <__epilogue_restores__>:
    3052:	2a 88       	ldd	r2, Y+18	; 0x12
    3054:	39 88       	ldd	r3, Y+17	; 0x11
    3056:	48 88       	ldd	r4, Y+16	; 0x10
    3058:	5f 84       	ldd	r5, Y+15	; 0x0f
    305a:	6e 84       	ldd	r6, Y+14	; 0x0e
    305c:	7d 84       	ldd	r7, Y+13	; 0x0d
    305e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3060:	9b 84       	ldd	r9, Y+11	; 0x0b
    3062:	aa 84       	ldd	r10, Y+10	; 0x0a
    3064:	b9 84       	ldd	r11, Y+9	; 0x09
    3066:	c8 84       	ldd	r12, Y+8	; 0x08
    3068:	df 80       	ldd	r13, Y+7	; 0x07
    306a:	ee 80       	ldd	r14, Y+6	; 0x06
    306c:	fd 80       	ldd	r15, Y+5	; 0x05
    306e:	0c 81       	ldd	r16, Y+4	; 0x04
    3070:	1b 81       	ldd	r17, Y+3	; 0x03
    3072:	aa 81       	ldd	r26, Y+2	; 0x02
    3074:	b9 81       	ldd	r27, Y+1	; 0x01
    3076:	ce 0f       	add	r28, r30
    3078:	d1 1d       	adc	r29, r1
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	ed 01       	movw	r28, r26
    3086:	08 95       	ret

00003088 <itoa>:
    3088:	fb 01       	movw	r30, r22
    308a:	9f 01       	movw	r18, r30
    308c:	e8 94       	clt
    308e:	42 30       	cpi	r20, 0x02	; 2
    3090:	c4 f0       	brlt	.+48     	; 0x30c2 <itoa+0x3a>
    3092:	45 32       	cpi	r20, 0x25	; 37
    3094:	b4 f4       	brge	.+44     	; 0x30c2 <itoa+0x3a>
    3096:	4a 30       	cpi	r20, 0x0A	; 10
    3098:	29 f4       	brne	.+10     	; 0x30a4 <itoa+0x1c>
    309a:	97 fb       	bst	r25, 7
    309c:	1e f4       	brtc	.+6      	; 0x30a4 <itoa+0x1c>
    309e:	90 95       	com	r25
    30a0:	81 95       	neg	r24
    30a2:	9f 4f       	sbci	r25, 0xFF	; 255
    30a4:	64 2f       	mov	r22, r20
    30a6:	77 27       	eor	r23, r23
    30a8:	0e 94 75 18 	call	0x30ea	; 0x30ea <__udivmodhi4>
    30ac:	80 5d       	subi	r24, 0xD0	; 208
    30ae:	8a 33       	cpi	r24, 0x3A	; 58
    30b0:	0c f0       	brlt	.+2      	; 0x30b4 <itoa+0x2c>
    30b2:	89 5d       	subi	r24, 0xD9	; 217
    30b4:	81 93       	st	Z+, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	a1 f7       	brne	.-24     	; 0x30a4 <itoa+0x1c>
    30bc:	16 f4       	brtc	.+4      	; 0x30c2 <itoa+0x3a>
    30be:	5d e2       	ldi	r21, 0x2D	; 45
    30c0:	51 93       	st	Z+, r21
    30c2:	10 82       	st	Z, r1
    30c4:	c9 01       	movw	r24, r18
    30c6:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <strrev>

000030ca <strrev>:
    30ca:	dc 01       	movw	r26, r24
    30cc:	fc 01       	movw	r30, r24
    30ce:	67 2f       	mov	r22, r23
    30d0:	71 91       	ld	r23, Z+
    30d2:	77 23       	and	r23, r23
    30d4:	e1 f7       	brne	.-8      	; 0x30ce <strrev+0x4>
    30d6:	32 97       	sbiw	r30, 0x02	; 2
    30d8:	04 c0       	rjmp	.+8      	; 0x30e2 <strrev+0x18>
    30da:	7c 91       	ld	r23, X
    30dc:	6d 93       	st	X+, r22
    30de:	70 83       	st	Z, r23
    30e0:	62 91       	ld	r22, -Z
    30e2:	ae 17       	cp	r26, r30
    30e4:	bf 07       	cpc	r27, r31
    30e6:	c8 f3       	brcs	.-14     	; 0x30da <strrev+0x10>
    30e8:	08 95       	ret

000030ea <__udivmodhi4>:
    30ea:	aa 1b       	sub	r26, r26
    30ec:	bb 1b       	sub	r27, r27
    30ee:	51 e1       	ldi	r21, 0x11	; 17
    30f0:	07 c0       	rjmp	.+14     	; 0x3100 <__udivmodhi4_ep>

000030f2 <__udivmodhi4_loop>:
    30f2:	aa 1f       	adc	r26, r26
    30f4:	bb 1f       	adc	r27, r27
    30f6:	a6 17       	cp	r26, r22
    30f8:	b7 07       	cpc	r27, r23
    30fa:	10 f0       	brcs	.+4      	; 0x3100 <__udivmodhi4_ep>
    30fc:	a6 1b       	sub	r26, r22
    30fe:	b7 0b       	sbc	r27, r23

00003100 <__udivmodhi4_ep>:
    3100:	88 1f       	adc	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	5a 95       	dec	r21
    3106:	a9 f7       	brne	.-22     	; 0x30f2 <__udivmodhi4_loop>
    3108:	80 95       	com	r24
    310a:	90 95       	com	r25
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	08 95       	ret

00003112 <_exit>:
    3112:	f8 94       	cli

00003114 <__stop_program>:
    3114:	ff cf       	rjmp	.-2      	; 0x3114 <__stop_program>
